{"version":3,"file":"static/js/801.9fbc4812.chunk.js","mappings":"wQAgBA,SAASA,EAAcC,EAAcC,GACnC,GAAID,EAAQE,YAAcF,EAAQE,WAAWC,aAAc,CACzD,MAAM,aAAEA,GAAiBH,EAAQE,WACjCD,EAAMG,UAAUD,EAClB,CACF,CAYA,MAAME,UAA4BC,EAAAA,UAChCC,WAAAA,CAAYC,GACVC,MAAMD,GAAO,KAUfE,gBAAU,OACVC,cAAQ,OAERC,MAAQ,CACNC,SAAS,EACTC,WAAOC,EACPC,cAAUD,GAfVE,KAAKC,eAAiBD,KAAKC,eAAeC,KAAKF,MAC/CA,KAAKP,gBAAaK,EAClBE,KAAKN,SAAW,KAClB,CAeAS,iBAAAA,GACEH,KAAKC,gBACP,CAEAG,kBAAAA,CAAmBC,GAKjB,GAJIL,KAAKT,MAAMe,OAASD,EAAUC,MAAQN,KAAKT,MAAMgB,UAAYF,EAAUE,SACzEP,KAAKC,sBAGiBH,IAApBE,KAAKP,YACHO,KAAKP,WAAWe,eAAe,WAAY,CAC7CR,KAAKP,WAAWgB,MAChBT,KAAKP,WAAWiB,SAChB,MAAMC,EAAQ,YAAcX,KAAKN,SAAW,WAC5CkB,SAASC,uBAAuB,iBAAiB,GAAGC,UAAYH,EAChEX,KAAKP,gBAAaK,CACpB,CAGF,QAA4BA,IAAxBE,KAAKL,MAAMI,SAAwB,CACrC,MAAMgB,EAAMC,IAAAA,IAAMhB,KAAKN,UAIjBuB,EAAW,qDACXC,EAAO,2EAEbF,IAAAA,UAAYC,EAAU,CACpBE,YAAaD,IACZE,MAAML,GAET,MAAMM,EAAeL,IAAAA,QAAUhB,KAAKL,MAAMI,SAAU,CAClDuB,KAAAA,CAAMvC,GACJ,OAAOA,EAAQE,YAAcF,EAAQE,WAAWqC,KAClD,EACAC,YAAAA,CAAaxC,EAAcyC,GACzB,OAAIzC,EAAQE,YAAcF,EAAQE,WAAWqC,MACpCN,IAAAA,aAAeQ,EAAQzC,EAAQE,YAAcF,EAAQE,WAAWqC,OAC9DvC,EAAQE,YAAcF,EAAQE,WAAWwC,KAC3CT,IAAAA,OAASQ,EAAQ,CACtBC,KAAMT,IAAAA,KAAOjC,EAAQE,YAAcF,EAAQE,WAAWwC,QAGnDT,IAAAA,OAASQ,EAAQ,CACtBC,KAAMT,IAAAA,KAAO,CACXU,cAAeC,EACfC,QAASH,EACTI,UAAWC,EACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,OAGvB,EACAlD,cAAeA,IACdsC,MAAML,GACTA,EAAIkB,UAAUZ,EAAaa,aAC3BlC,KAAKP,WAAasB,CACpB,CACF,CAEAoB,MAAAA,GACE,OAAInC,KAAKL,MAAMC,SACNwC,EAAAA,EAAAA,GAAA,OAAKC,UAAU,4BAA2BC,SAAC,eAEhDtC,KAAKL,MAAME,OACNuC,EAAAA,EAAAA,GAAA,OAAKC,UAAU,0BAAyBC,SAAC,2DAG9CF,EAAAA,EAAAA,GAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,GAAA,OAAKG,GAAIvC,KAAKN,YAItB,CAGAO,cAAAA,GACE,MAAMuC,GAAmBC,EAAAA,EAAAA,IAAuBzC,KAAKT,MAAMe,KAAMN,KAAKT,MAAMgB,SAC5EP,KAAKT,MACFmD,YAAYF,GACZG,MAAMC,IACL,MAAMC,EAAiBC,KAAKC,MAAMH,GAClC5C,KAAKgD,SAAS,CAAEjD,SAAU8C,EAAgBjD,SAAS,GAAQ,IAE5DqD,OAAOpD,IACNG,KAAKgD,SAAS,CAAEnD,MAAOA,EAAOD,SAAS,EAAOG,cAAUD,GAAY,GAE1E,EA5GIV,EAQG8D,aAAe,CACpBR,YAAaS,EAAAA,IAsGjB,O","sources":["experiment-tracking/components/artifact-view-components/ShowArtifactMapView.tsx"],"sourcesContent":["/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { getArtifactContent, getArtifactLocationUrl } from '../../../common/utils/ArtifactUtils';\nimport './ShowArtifactMapView.css';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\n\nfunction onEachFeature(feature: any, layer: any) {\n  if (feature.properties && feature.properties.popupContent) {\n    const { popupContent } = feature.properties;\n    layer.bindPopup(popupContent);\n  }\n}\n\ntype OwnProps = {\n  runUuid: string;\n  path: string;\n  getArtifact?: (...args: any[]) => any;\n};\n\ntype State = any;\n\ntype Props = OwnProps & typeof ShowArtifactMapView.defaultProps;\n\nclass ShowArtifactMapView extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.fetchArtifacts = this.fetchArtifacts.bind(this);\n    this.leafletMap = undefined;\n    this.mapDivId = 'map';\n  }\n\n  static defaultProps = {\n    getArtifact: getArtifactContent,\n  };\n\n  leafletMap: any;\n  mapDivId: any;\n\n  state = {\n    loading: true,\n    error: undefined,\n    features: undefined,\n  };\n\n  componentDidMount() {\n    this.fetchArtifacts();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.path !== prevProps.path || this.props.runUuid !== prevProps.runUuid) {\n      this.fetchArtifacts();\n    }\n\n    if (this.leafletMap !== undefined) {\n      if (this.leafletMap.hasOwnProperty('_layers')) {\n        this.leafletMap.off();\n        this.leafletMap.remove();\n        const inner = \"<div id='\" + this.mapDivId + \"'></div>\";\n        document.getElementsByClassName('map-container')[0].innerHTML = inner;\n        this.leafletMap = undefined;\n      }\n    }\n\n    if (this.state.features !== undefined) {\n      const map = L.map(this.mapDivId);\n\n      // Load tiles from OSM with the corresponding attribution\n      // Potentially, these could be set in an ENV VAR to use a custom map\n      const tilesURL = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n      const attr = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\n\n      L.tileLayer(tilesURL, {\n        attribution: attr,\n      }).addTo(map);\n\n      const geojsonLayer = L.geoJSON(this.state.features, {\n        style(feature: any) {\n          return feature.properties && feature.properties.style;\n        },\n        pointToLayer(feature: any, latlng: any) {\n          if (feature.properties && feature.properties.style) {\n            return L.circleMarker(latlng, feature.properties && feature.properties.style);\n          } else if (feature.properties && feature.properties.icon) {\n            return L.marker(latlng, {\n              icon: L.icon(feature.properties && feature.properties.icon),\n            });\n          }\n          return L.marker(latlng, {\n            icon: L.icon({\n              iconRetinaUrl: iconRetina,\n              iconUrl: icon,\n              shadowUrl: iconShadow,\n              iconSize: [24, 36],\n              iconAnchor: [12, 36],\n            }),\n          });\n        },\n        onEachFeature: onEachFeature,\n      }).addTo(map);\n      map.fitBounds(geojsonLayer.getBounds());\n      this.leafletMap = map;\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <div className=\"artifact-map-view-loading\">Loading...</div>;\n    }\n    if (this.state.error) {\n      return <div className=\"artifact-map-view-error\">Oops, we couldn't load your file because of an error.</div>;\n    } else {\n      return (\n        <div className=\"map-container\">\n          <div id={this.mapDivId}></div>\n        </div>\n      );\n    }\n  }\n\n  /** Fetches artifacts and updates component state with the result */\n  fetchArtifacts() {\n    const artifactLocation = getArtifactLocationUrl(this.props.path, this.props.runUuid);\n    this.props\n      .getArtifact(artifactLocation)\n      .then((rawFeatures: any) => {\n        const parsedFeatures = JSON.parse(rawFeatures);\n        this.setState({ features: parsedFeatures, loading: false });\n      })\n      .catch((error: any) => {\n        this.setState({ error: error, loading: false, features: undefined });\n      });\n  }\n}\n\nexport default ShowArtifactMapView;\n"],"names":["onEachFeature","feature","layer","properties","popupContent","bindPopup","ShowArtifactMapView","Component","constructor","props","super","leafletMap","mapDivId","state","loading","error","undefined","features","this","fetchArtifacts","bind","componentDidMount","componentDidUpdate","prevProps","path","runUuid","hasOwnProperty","off","remove","inner","document","getElementsByClassName","innerHTML","map","L","tilesURL","attr","attribution","addTo","geojsonLayer","style","pointToLayer","latlng","icon","iconRetinaUrl","iconRetina","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","fitBounds","getBounds","render","_jsx","className","children","id","artifactLocation","getArtifactLocationUrl","getArtifact","then","rawFeatures","parsedFeatures","JSON","parse","setState","catch","defaultProps","getArtifactContent"],"sourceRoot":""}